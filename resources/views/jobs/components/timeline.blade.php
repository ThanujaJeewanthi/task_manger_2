<!-- Timeline Section -->

<div class="timeline-section ">
    <div class="card">
    {{-- @if  auth()->user()->hasPermission('13.1') 
    how to use the middleware like above
   --}}

        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-chart-gantt me-2"></i>Project Timeline
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshTimeline()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
            </div>
        </div>

        <div class="card-body">
            <!-- Project Overview -->
            <div class="project-overview mb-4">
                <div class="row">
                    <div class="col-md-8">
                        <h6 class="fw-bold">Job #{{ $job->id }} - {{ $job->jobType->name }}</h6>
                        <div class="job-meta">
                            @if($job->start_date && $job->due_date)
                                <span class="badge bg-info me-2">
                                    <i class="fas fa-calendar me-1"></i>
                                    {{ $job->start_date->format('M d') }} - {{ $job->due_date->format('M d, Y') }}
                                </span>
                            @else
                                <span class="badge bg-warning me-2">
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    No dates set
                                </span>
                            @endif

                            @php
                                $statusColors = [
                                    'pending' => 'warning',
                                    'in_progress' => 'primary',
                                    'completed' => 'success',
                                    'cancelled' => 'danger'
                                ];
                            @endphp
                            <span class="badge bg-{{ $statusColors[$job->status] ?? 'secondary' }}">
                                {{ ucfirst(str_replace('_', ' ', $job->status)) }}
                            </span>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="progress-circle">
                            <div class="progress-text">{{ $jobStats['overall_progress'] }}%</div>
                        </div>
                    </div>
                </div>
            </div>

            @if($timelineData['tasks'] && count($timelineData['tasks']) > 0)
                <!-- Date Range Controls -->
                <div class="date-controls mb-3">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex gap-2 align-items-center">
                                <label class="form-label mb-0 fw-bold">View:</label>
                                <input type="date" class="form-control form-control-sm" id="startDate"
                                       value="{{ $job->start_date ? $job->start_date->format('Y-m-d') : date('Y-m-d') }}" style="width: auto;">
                                <span class="text-muted">to</span>
                                <input type="date" class="form-control form-control-sm" id="endDate"
                                       value="{{ $job->due_date ? $job->due_date->format('Y-m-d') : date('Y-m-d', strtotime('+30 days')) }}" style="width: auto;">
                                <button class="btn btn-primary btn-sm" onclick="updateDateRange()">Update</button>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary" onclick="setQuickRange('week')">This Week</button>
                                <button class="btn btn-outline-secondary" onclick="setQuickRange('month')">This Month</button>
                                <button class="btn btn-outline-secondary active" onclick="setQuickRange('job')">Full Job</button>
                            </div>
                        </div>
                    </div>
                </div>



                <!-- Timeline Chart -->
                <div class="timeline-chart">
                        <div class="timeline-scroll-container">
                    <div class="timeline-header">
                        <div class="timeline-labels">Tasks</div>
                        <div class="timeline-dates-container">
                            <div class="timeline-dates" id="timelineDates">
                                <!-- Dates generated by JS -->
                            </div>
                        </div>
                    </div>

                    <!-- Scrollable Container for Task Rows -->
                    <div class="timeline-content">
                        <!-- Task Rows -->
                        @foreach($timelineData['tasks'] as $task)
                            <div class="timeline-row" onclick="selectTask({{ $task['id'] }})" data-task-id="{{ $task['id'] }}">
                                <div class="task-label">
                                    <div class="task-info">
                                        @php
                                            $statusIcons = [
                                                'completed' => 'fas fa-check-circle text-success',
                                                'in_progress' => 'fas fa-play-circle text-primary',
                                                'pending' => 'fas fa-clock text-warning',
                                                'cancelled' => 'fas fa-times-circle text-danger'
                                            ];
                                        @endphp
                                        <i class="{{ $statusIcons[$task['status']] ?? 'fas fa-circle text-secondary' }} me-2"></i>
                                        <div>
                                            <div class="task-name">{{ $task['name'] }}</div>
                                            <div class="task-employees">
                                                {{ implode(', ', array_column($task->assignedUsers->toArray(), 'name')) }}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="task-timeline-container">
                                    <div class="task-timeline">
                                        @php
                                            $barClass = match($task['status']) {
                                                'completed' => 'task-completed',
                                                'in_progress' => 'task-progress',
                                                'pending' => 'task-pending',
                                                default => 'task-pending'
                                            };
                                        @endphp
                                        <div class="task-bar {{ $barClass }}"
                                             data-start="{{ $task['start_date']?->format('Y-m-d') }}"
                                             data-end="{{ $task['end_date']?->format('Y-m-d') }}"
                                             data-progress="{{ $task['progress'] }}">
                                            <div class="task-content">
                                                <span class="task-title">{{ Str::limit($task['name'], 20) }}</span>
                                                @if($task['status'] === 'in_progress' && $task['progress'] > 0)
                                                    <div class="progress-fill" style="width: {{ $task['progress'] }}%"></div>
                                                @endif
                                            </div>
                                            @if($task['has_extension_request'])
                                                <div class="extension-badge" title="Extension Requested">
                                                    <i class="fas fa-clock"></i>
                                                </div>
                                            @endif
                                        </div>
                                    </div>
                                </div>
                            </div>
                        @endforeach
                    </div>
                        </div>
                </div>

                <!-- Task Details Panel -->
                <div class="container mt-5 mb-5 me-0 " style="margin-left:0; margin-right:0;">
                    <div class="card">
                        <div class="task-details" id="taskDetails" style="display: none;">
                    <div class="row">
                        <div class="col-md-8 ">
                            <h6 id="taskName" class="text-dark fw-bold ">Task Details</h6>
                            <p id="taskDescription" class="text-muted mb-3">Select a task to view details</p>

                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Timeline:</strong><br>
                                    <span id="taskTimeline">-</span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Progress:</strong><br>
                                    <div class="progress">
                                        <div class="progress-bar" id="taskProgressBar" style="width: 0%"></div>
                                    </div>
                                    <small id="taskProgressText">0%</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <button class="btn btn-outline-secondary btn-sm" id="editTaskBtn" style="display: none;">
                                <i class="fas fa-edit"></i>Edit Task
                            </button>
                        </div>
                    </div>

                    <div class="mt-3">
                        <strong>Assigned Employees:</strong>
                        <div id="taskEmployees" class="mt-2">
                            <!-- Populated by JS -->
                        </div>
                    </div>


                </div>
                    </div>
                </div>
            @else
                <div class="text-center py-5">
                    <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No Tasks Available</h5>
                    <p class="text-muted">Tasks will appear here once they are created and assigned.</p>
                </div>
            @endif
        </div>
    </div>
</div>


@section('styles')
<style>
.timeline-section {
    margin-top: 2rem;
}

.project-overview {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 10px;
    margin-bottom: 1.5rem;
}

.job-meta {
    margin-top: 0.5rem;
}

.progress-circle {
    width: 80px;
    height: 80px;
    background: conic-gradient(#ffffff {{ $jobStats['overall_progress'] * 3.6 }}deg, rgba(255,255,255,0.3) 0deg);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: auto;
}

.progress-circle .progress-text {
    background: rgba(255,255,255,0.2);
    padding: 0.5rem;
    border-radius: 50%;
    font-weight: bold;
    font-size: 0.9rem;
}

.date-controls {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
}

.timeline-chart {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
}

.timeline-header {
    display: flex;
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    position: sticky;
    top: 0;
    z-index: 10;
}

.timeline-labels {
    width: 250px;
    min-width: 250px;
    padding: 1rem;
    font-weight: 600;
    border-right: 2px solid #dee2e6;
    background: #f8f9fa;
}

/* NEW: Scrollable dates container */
.timeline-dates-container {
    flex: 1;
    overflow-x: auto;
    background: #f8f9fa;
}

.timeline-dates {
    display: flex;
    height: 50px;
    min-width: max-content; /* Allow dates to determine width */
}

.date-column {
    min-width: 60px; /* Fixed minimum width for readability */
    width: 60px;
    flex-shrink: 0;
    padding: 0.5rem 0.25rem;
    text-align: center;
    border-right: 1px solid #e9ecef;
    font-size: 0.8rem;
}

.date-column.today {
    background: #fff3cd;
    font-weight: bold;
}

.date-column.weekend {
    background: #f8f9fa;
    color: #6c757d;
}

/* NEW: Scrollable content container */
.timeline-content {
    max-height: 500px;
    overflow-y: auto;
}

.timeline-row {
    display: flex;
    min-height: 60px;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    transition: background 0.2s;
}

.timeline-row:hover {
    background: #f8f9fa;
}

.timeline-row.selected {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
}

.task-label {
    width: 250px;
    min-width: 250px;
    padding: 1rem;
    border-right: 2px solid #dee2e6;
    display: flex;
    align-items: center;
    background: white; /* Ensure consistent background */
}

.task-info {
    display: flex;
    align-items: center;
    width: 100%;
}

.task-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.task-employees {
    font-size: 0.8rem;
    color: #6c757d;
}

/* NEW: Scrollable task timeline container */
.task-timeline-container {
    flex: 1;
    overflow-x: auto;
}

.task-timeline {
    padding: 1rem;
    position: relative;
    min-width: max-content; /* Allow tasks to determine width */
}

.task-bar {
    height: 30px;
    border-radius: 15px;
    position: absolute;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    min-width: 60px; /* Minimum width for visibility */
}

.task-completed {
    background: linear-gradient(135deg, #28a745, #20c997);
}

.task-progress {
    background: linear-gradient(135deg, #007bff, #6610f2);
}

.task-pending {
    background: linear-gradient(135deg, #ffc107, #fd7e14);
}

.task-content {
    display: flex;
    align-items: center;
    padding: 0 0.75rem;
    height: 100%;
    color: white;
    font-weight: 600;
    font-size: 0.85rem;
    position: relative;
}

.progress-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background: rgba(255,255,255,0.3);
    border-radius: 15px;
}

.extension-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #dc3545;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
}

.today-marker {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #dc3545;
    z-index: 5;
    pointer-events: none;
}

.task-details {
    margin-top: 1.5rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
}

/* NEW: Synchronize scroll between header and content */
.timeline-dates-container::-webkit-scrollbar,
.task-timeline-container::-webkit-scrollbar {
    height: 8px;

}

.timeline-dates-container::-webkit-scrollbar-track,
.task-timeline-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    display:none;
}

.timeline-dates-container::-webkit-scrollbar-thumb,
.task-timeline-container::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;


}

.timeline-dates-container::-webkit-scrollbar-thumb:hover,
.task-timeline-container::-webkit-scrollbar-thumb:hover {
    background: #555;

}

.timeline-scroll-container {
    overflow-x: auto;
    overflow-y: hidden;
    /* Set a max-width if needed */
    width: 100%;
    /* Optionally set a max-height if you want vertical scroll for all content */
}

.timeline-header,
.timeline-content {
    min-width: max-content;
    overflow: visible !important; /* Remove scrollbars from these */
}

.timeline-content {
    max-height: none !important;
    overflow-y: visible !important;
}

.timeline-dates-container,
.task-timeline-container {
    overflow-x: visible !important;
    overflow-y: visible !important;
}

/* Alert styling */
.alert-sm {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
}
</style>
@endsection

<script>
const jobId = {{ $job->id }};
const tasksData = @json($timelineData['tasks'] ?? []);

document.addEventListener('DOMContentLoaded', function() {
    @if(count($timelineData['tasks']) > 0)
        initTimeline();
        setupScrollSync();
    @endif
});

function initTimeline() {
    generateDates();
    positionTasks();
    addTodayMarker();
    checkScrollNeed();
}

function generateDates() {
    const container = document.getElementById('timelineDates');
    if (!container) return;

    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const today = new Date();

    container.innerHTML = '';
    let current = new Date(startDate);

    while (current <= endDate) {
        const col = document.createElement('div');
        col.className = 'date-column';

        const day = current.getDate();
        const month = current.toLocaleDateString('en', { month: 'short' });

        if (current.toDateString() === today.toDateString()) {
            col.classList.add('today');
        }
        if (current.getDay() === 0 || current.getDay() === 6) {
            col.classList.add('weekend');
        }

        col.innerHTML = `<div style="font-size: 0.7rem; color: #6c757d;">${month}</div><div>${day}</div>`;
        container.appendChild(col);

        current.setDate(current.getDate() + 1);
    }
}

function positionTasks() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const dayWidth = 60;

    // Set the width of each task timeline
    document.querySelectorAll('.task-timeline').forEach(timeline => {
        timeline.style.width = (totalDays * dayWidth) + 'px';
    });

    document.querySelectorAll('.timeline-row').forEach(row => {
        const taskBar = row.querySelector('.task-bar');
        if (!taskBar) return;

        const taskStart = taskBar.dataset.start ? new Date(taskBar.dataset.start) : null;
        const taskEnd = taskBar.dataset.end ? new Date(taskBar.dataset.end) : null;

        // Hide tasks completely outside the date range
        if (!taskStart || !taskEnd || taskEnd < startDate || taskStart > endDate) {
            row.style.display = 'none';
            return;
        }

        // Show tasks that fall within or overlap the range
        row.style.display = 'flex';

        // Calculate position in pixels
        const effectiveStart = new Date(Math.max(taskStart, startDate));
        const effectiveEnd = new Date(Math.min(taskEnd, endDate));

        const startOffset = Math.ceil((effectiveStart - startDate) / (1000 * 60 * 60 * 24));
        const duration = Math.ceil((effectiveEnd - effectiveStart) / (1000 * 60 * 60 * 24)) + 1;

        const leftPx = startOffset * dayWidth;
        const widthPx = Math.max(duration * dayWidth, 60); // Minimum 60px width

        taskBar.style.left = leftPx + 'px';
        taskBar.style.width = widthPx + 'px';
        taskBar.style.position = 'absolute';
    });
}

function addTodayMarker() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const today = new Date();
    const dayWidth = 60;

    document.querySelectorAll('.today-marker').forEach(m => m.remove());

    if (today >= startDate && today <= endDate) {
        const dayOffset = Math.ceil((today - startDate) / (1000 * 60 * 60 * 24));
        const leftPx = dayOffset * dayWidth;

        document.querySelectorAll('.task-timeline').forEach(timeline => {
            const marker = document.createElement('div');
            marker.className = 'today-marker';
            marker.style.left = leftPx + 'px';
            timeline.appendChild(marker);
        });
    }
}

function checkScrollNeed() {
    const datesContainer = document.querySelector('.timeline-dates-container');
    const datesContent = document.querySelector('.timeline-dates');
    const instructions = document.getElementById('scrollInstructions');

    if (datesContainer && datesContent && instructions) {
        if (datesContent.scrollWidth > datesContainer.clientWidth) {
            instructions.style.display = 'block';
        } else {
            instructions.style.display = 'none';
        }
    }
}

// NEW: Synchronize scroll between header dates and task timelines
function setupScrollSync() {
    const headerDatesContainer = document.querySelector('.timeline-dates-container');
    const taskTimelineContainers = document.querySelectorAll('.task-timeline-container');

    if (!headerDatesContainer || taskTimelineContainers.length === 0) return;

    let isScrolling = false;

    // Sync header scroll to all task timelines
    headerDatesContainer.addEventListener('scroll', function() {
        if (isScrolling) return;
        isScrolling = true;

        taskTimelineContainers.forEach(container => {
            container.scrollLeft = this.scrollLeft;
        });

        setTimeout(() => { isScrolling = false; }, 10);
    });

    // Sync any task timeline scroll to header and other timelines
    taskTimelineContainers.forEach((container, index) => {
        container.addEventListener('scroll', function() {
            if (isScrolling) return;
            isScrolling = true;

            headerDatesContainer.scrollLeft = this.scrollLeft;

            taskTimelineContainers.forEach((otherContainer, otherIndex) => {
                if (otherIndex !== index) {
                    otherContainer.scrollLeft = this.scrollLeft;
                }
            });

            setTimeout(() => { isScrolling = false; }, 10);
        });
    });
}

function selectTask(taskId) {
    // Remove previous selection
    document.querySelectorAll('.timeline-row').forEach(row => row.classList.remove('selected'));

    // Add selection to current row
    const selectedRow = document.querySelector(`[data-task-id="${taskId}"]`);
    if (selectedRow) {
        selectedRow.classList.add('selected');
    }

    // Fetch and display task details
    fetch(`/jobs/${jobId}/tasks/${taskId}/details`)
        .then(response => response.json())
        .then(data => {
            displayTaskDetails(data);
        })
        .catch(error => {
            console.error('Error fetching task details:', error);
        });
}

function displayTaskDetails(data) {
    const panel = document.getElementById('taskDetails');

    // Update task info
    document.getElementById('taskName').textContent = data.task.name;
    document.getElementById('taskDescription').textContent = data.task.description;

    // Update timeline info
    if (data.employees.length > 0) {
        const startDate = data.employees[0].start_date || 'Not set';
        const endDate = data.employees[0].end_date || 'Not set';
        document.getElementById('taskTimeline').textContent = `${startDate} - ${endDate}`;
    }

    // Update progress
    const progressBar = document.getElementById('taskProgressBar');
    const progressText = document.getElementById('taskProgressText');
    progressBar.style.width = data.task.progress + '%';
    progressText.textContent = data.task.progress + '%';

    // Update employees
    const employeesContainer = document.getElementById('taskEmployees');
    employeesContainer.innerHTML = '';
    data.employees.forEach(emp => {
        const empDiv = document.createElement('div');
        empDiv.className = 'badge bg-secondary me-2 mb-1';
        empDiv.textContent = emp.name;
        employeesContainer.appendChild(empDiv);
    });



    // Show edit button
    const editBtn = document.getElementById('editTaskBtn');
    if (editBtn) {
        editBtn.style.display = 'block';
        editBtn.onclick = () => window.location.href = `/jobs/${jobId}/tasks/${data.task.id}/edit`;
    }

    panel.style.display = 'block';
}

function updateDateRange() {
    initTimeline();
}

function setQuickRange(type) {
    const startInput = document.getElementById('startDate');
    const endInput = document.getElementById('endDate');
    const today = new Date();

    // Update button states
    document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');

    switch(type) {
        case 'week':
            const weekStart = new Date(today);
            weekStart.setDate(today.getDate() - today.getDay());
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            startInput.value = weekStart.toISOString().split('T')[0];
            endInput.value = weekEnd.toISOString().split('T')[0];
            break;
        case 'month':
            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
            const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            startInput.value = monthStart.toISOString().split('T')[0];
            endInput.value = monthEnd.toISOString().split('T')[0];
            break;
        case 'job':
            startInput.value = '{{ $job->start_date ? $job->start_date->format('Y-m-d') : date('Y-m-d') }}';
            endInput.value = '{{ $job->due_date ? $job->due_date->format('Y-m-d') : date('Y-m-d', strtotime('+30 days')) }}';
            break;
    }

    initTimeline();
}

function refreshTimeline() {
    fetch(`/jobs/${jobId}/timeline-data`)
        .then(response => response.json())
        .then(data => {
            location.reload(); // Simple reload for now
        })
        .catch(error => console.error('Error:', error));
}
</script>
